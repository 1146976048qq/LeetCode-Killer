# 唐僧师徒四人去西天取经，一路翻山越岭。一日，师市徒四人途径一个m
# x口长方形区域，巴知
# 将取经队伍作为一个整体，4人行走相同路线。
# ，取经队伍的起点为该长方形区域的左上角，目的地为该长方形区域的右下角。
# § 行走路线可以向前、后、左、右四个方向前进 （不允许超出该长方
# 形区域）
# 4输入包含该区域的长m和宽n 前后移动允许的高度差t，以及该长方形区域内各点的高度h。
# 5要水该区域内相邻两次移动的高度差在高度范国以内。取经队伍最多有3次爆发机会，每使用一次爆发机会，可以让取经队伍一次移动
# 突破高度差限制。
# 请问取经队伍通过该区域最小的移动次数是多少？返回-1表示历徒四人无法直接通过该区域。

# 输入描述: 第一行包含三个整数m，n，t，表示该长方形区域的长宽和允许的高度差。
# 接下来m行，每行包含n个整数，表示该长方形区域内各点的高度h。
# 输出描述: 输出一个整数，表示取经队伍通过该区域最小的移动次数。
# 输入例子1: 4 4 10
# 10 20 30 40
# 100 200 300 400
# 200 230 260 290
# 300 400 500 600
# 输出例子1: 6 # 10->100->200->300->400->500->600
# 例子说明1: 从(0,0)到(3,3)的最短路径为(0,0)->(1,0)->(2,0)->(3,0)->(3,1)->(3,2)->(3,3)，共6步。

# 代码
def getMinStep(m, n, t, h):
    dp = [[0 for _ in range(n)] for _ in range(m)]
    for i in range(m):
        for j in range(n):
            if i == 0 and j == 0:
                dp[i][j] = 0
            elif i == 0:
                if abs(h[i][j] - h[i][j - 1]) <= t:
                    dp[i][j] = dp[i][j - 1] + 1
            elif j == 0:
                if abs(h[i][j] - h[i - 1][j]) <= t:
                    dp[i][j] = dp[i - 1][j] + 1
            else:
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1
                if abs(h[i][j] - h[i - 1][j]) <= t:
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)
                if abs(h[i][j] - h[i][j - 1]) <= t:
                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)
    return dp[m - 1][n - 1]

if __name__ == '__main__':
    m, n, t = map(int, input().split())
    h = []
    for i in range(m):
        h.append(list(map(int, input().split())))
    print(getMinStep(m, n, t, h))

